// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ef2;

#nullable disable

namespace ef2.Migrations
{
    [DbContext(typeof(ExaminationDbContext))]
    [Migration("20250917142142_initialExamination")]
    partial class initialExamination
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ef2.Course", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("MaximumDegree")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID");

                    b.ToTable("Courses", t =>
                        {
                            t.HasCheckConstraint("CK_Course_MaximumDegree_Positive", "MaximumDegree > 0");
                        });

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Principles of OOP and C#",
                            IsActive = true,
                            MaximumDegree = 100m,
                            Title = "Object-Oriented Programming"
                        },
                        new
                        {
                            ID = 2,
                            CreatedDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fundamentals of networking and protocols",
                            IsActive = true,
                            MaximumDegree = 100m,
                            Title = "Computer Networks"
                        },
                        new
                        {
                            ID = 3,
                            CreatedDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Processes, memory, and file management",
                            IsActive = true,
                            MaximumDegree = 100m,
                            Title = "Operating Systems"
                        });
                });

            modelBuilder.Entity("ef2.Exam", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("TotalMarks")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("InstructorId");

                    b.HasIndex("StartDate");

                    b.ToTable("Exams", t =>
                        {
                            t.HasCheckConstraint("CK_Exam_EndDateAfterStart", "EndDate > StartDate");
                        });

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CourseID = 1,
                            Description = "C# classes and inheritance",
                            Duration = new TimeSpan(0, 2, 0, 0, 0),
                            EndDate = new DateTime(2024, 10, 10, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorId = 1,
                            IsActive = true,
                            StartDate = new DateTime(2024, 10, 10, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "OOP Midterm",
                            TotalMarks = 50m
                        },
                        new
                        {
                            ID = 2,
                            CourseID = 2,
                            Description = "Covers OSI model, TCP/IP, routing",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            EndDate = new DateTime(2024, 12, 20, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorId = 2,
                            IsActive = true,
                            StartDate = new DateTime(2024, 12, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Networks Final",
                            TotalMarks = 100m
                        });
                });

            modelBuilder.Entity("ef2.ExamAttempt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<bool>("IsGraded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSubmitted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalScore")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("ExamID");

                    b.HasIndex("StartTime");

                    b.HasIndex("StudentID");

                    b.ToTable("ExamAttempts");
                });

            modelBuilder.Entity("ef2.Instructor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Email = "yasser.ibrahim@gmail.com",
                            HireDate = new DateTime(2019, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Dr. Yasser Ibrahim",
                            Specialization = "Computer Science"
                        },
                        new
                        {
                            ID = 2,
                            Email = "mona.fathy@gmail.com",
                            HireDate = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Prof. Mona Fathy",
                            Specialization = "Networks and Security"
                        });
                });

            modelBuilder.Entity("ef2.InstructorCourse", b =>
                {
                    b.Property<int>("InstructorID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("InstructorID", "CourseID");

                    b.HasIndex("CourseID");

                    b.ToTable("InstructorCourses");

                    b.HasData(
                        new
                        {
                            InstructorID = 1,
                            CourseID = 1,
                            AssignedDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true
                        },
                        new
                        {
                            InstructorID = 2,
                            CourseID = 2,
                            AssignedDate = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("ef2.Question", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<decimal>("Marks")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ExamID");

                    b.ToTable("Questions", t =>
                        {
                            t.HasCheckConstraint("CK_Question_Marks_Positive", "Marks > 0");
                        });

                    b.HasDiscriminator<int>("QuestionType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ef2.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("StudentNumber")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Email = "Sohaila@gmail.com",
                            EnrollmentDate = new DateTime(2024, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Sohaila Ahmed",
                            StudentNumber = "s2001"
                        },
                        new
                        {
                            ID = 2,
                            Email = "khaled@gmail.com",
                            EnrollmentDate = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Khaled Youssef",
                            StudentNumber = "s2002"
                        },
                        new
                        {
                            ID = 3,
                            Email = "mariam@gmail.com",
                            EnrollmentDate = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Mariam Adel",
                            StudentNumber = "s2003"
                        },
                        new
                        {
                            ID = 4,
                            Email = "ahmed@gmail.com",
                            EnrollmentDate = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Ahmed Samir",
                            StudentNumber = "s2004"
                        },
                        new
                        {
                            ID = 5,
                            Email = "nour@gmail.com",
                            EnrollmentDate = new DateTime(2024, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Nour Hassan",
                            StudentNumber = "s2005"
                        });
                });

            modelBuilder.Entity("ef2.StudentAnswer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("BooleanAnswer")
                        .HasColumnType("bit");

                    b.Property<int>("ExamAttemptID")
                        .HasColumnType("int");

                    b.Property<decimal?>("MarksObtained")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("SelectedOption")
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ExamAttemptID");

                    b.HasIndex("QuestionId");

                    b.ToTable("StudentAnswers");
                });

            modelBuilder.Entity("ef2.StudentCourse", b =>
                {
                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Grade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("StudentID", "CourseID");

                    b.HasIndex("CourseID");

                    b.ToTable("StudentCourses");

                    b.HasData(
                        new
                        {
                            StudentID = 1,
                            CourseID = 1,
                            EnrollmentDate = new DateTime(2024, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false
                        },
                        new
                        {
                            StudentID = 2,
                            CourseID = 1,
                            EnrollmentDate = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false
                        },
                        new
                        {
                            StudentID = 3,
                            CourseID = 2,
                            EnrollmentDate = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false
                        });
                });

            modelBuilder.Entity("ef2.EssayQuestion", b =>
                {
                    b.HasBaseType("ef2.Question");

                    b.Property<string>("GradingCriteria")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("MaxWordCount")
                        .HasColumnType("int");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Question_Marks_Positive", "Marks > 0");
                        });

                    b.HasDiscriminator().HasValue(2);

                    b.HasData(
                        new
                        {
                            ID = 3,
                            CreatedDate = new DateTime(2024, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExamID = 2,
                            Marks = 10m,
                            QuestionText = "Discuss the differences between TCP and UDP with examples.",
                            QuestionType = 2,
                            GradingCriteria = "Accuracy, technical depth, clarity",
                            MaxWordCount = 400
                        });
                });

            modelBuilder.Entity("ef2.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("ef2.Question");

                    b.Property<string>("CorrectOption")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("OptionA")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OptionB")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OptionC")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OptionD")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Question_Marks_Positive", "Marks > 0");
                        });

                    b.HasDiscriminator().HasValue(0);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedDate = new DateTime(2024, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExamID = 1,
                            Marks = 5m,
                            QuestionText = "Which OOP concept allows creating multiple methods with the same name but different parameters?",
                            QuestionType = 0,
                            CorrectOption = "B",
                            OptionA = "Inheritance",
                            OptionB = "Polymorphism",
                            OptionC = "Encapsulation",
                            OptionD = "Abstraction"
                        });
                });

            modelBuilder.Entity("ef2.TrueFalseQuestion", b =>
                {
                    b.HasBaseType("ef2.Question");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Question_Marks_Positive", "Marks > 0");
                        });

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            ID = 2,
                            CreatedDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExamID = 2,
                            Marks = 5m,
                            QuestionText = "The OSI model has 7 layers.",
                            QuestionType = 1,
                            CorrectAnswer = true
                        });
                });

            modelBuilder.Entity("ef2.Exam", b =>
                {
                    b.HasOne("ef2.Course", "Course")
                        .WithMany("Exams")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ef2.Instructor", "Instructor")
                        .WithMany("Exams")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("ef2.ExamAttempt", b =>
                {
                    b.HasOne("ef2.Exam", "Exam")
                        .WithMany("ExamAttempts")
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ef2.Student", "Student")
                        .WithMany("ExamAttempts")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ef2.InstructorCourse", b =>
                {
                    b.HasOne("ef2.Course", "Course")
                        .WithMany("InstructorCourses")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ef2.Instructor", "Instructor")
                        .WithMany("InstructorCourses")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("ef2.Question", b =>
                {
                    b.HasOne("ef2.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("ef2.StudentAnswer", b =>
                {
                    b.HasOne("ef2.ExamAttempt", "ExamAttempt")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("ExamAttemptID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ef2.Question", "Question")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExamAttempt");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ef2.StudentCourse", b =>
                {
                    b.HasOne("ef2.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ef2.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ef2.Course", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("InstructorCourses");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("ef2.Exam", b =>
                {
                    b.Navigation("ExamAttempts");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ef2.ExamAttempt", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("ef2.Instructor", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("InstructorCourses");
                });

            modelBuilder.Entity("ef2.Question", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("ef2.Student", b =>
                {
                    b.Navigation("ExamAttempts");

                    b.Navigation("StudentCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
